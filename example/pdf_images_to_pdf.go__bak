// https://github.com/unidoc/unipdf-examples/blob/689c1de20c7691beb884302ceab938668256e885/pdf/pdf_merge.go
package main

import (
	"fmt"
	"os"

	unicommon "github.com/unidoc/unidoc/common"
	pdfcore "github.com/unidoc/unidoc/pdf/core"
	pdf "github.com/unidoc/unidoc/pdf/model"
)

func main() {
	if len(os.Args) < 3 {
		fmt.Printf("Usage: go run pdf_add_images.go output.pdf img1.jpg img2.jpg ...\n")
		os.Exit(1)
	}

	outputPath := os.Args[1]
	inputPaths := os.Args[2:len(os.Args)]

	err := imagesToPdf(inputPaths, outputPath)
	if err != nil {
		fmt.Printf("Error: %v\n", err)
		os.Exit(1)
	}

	fmt.Printf("Complete, see output file: %s\n", outputPath)
}

// Images to PDF.
func imagesToPdf(inputPaths []string, outputPath string) error {
	pdfWriter := pdf.NewPdfWriter()

	unicommon.Log.Debug("Inputs: %v", inputPaths)

	// Make the document structure.
	for idx, imgPath := range inputPaths {
		unicommon.Log.Debug("Image: %s", imgPath)
		// Open the image file.
		reader, err := os.Open(imgPath)
		if err != nil {
			unicommon.Log.Error("Error opening file: %s", err)
			return err
		}
		defer reader.Close()

		img, err := pdf.ImageHandling.Read(reader)
		if err != nil {
			unicommon.Log.Error("Error loading image: %s", err)
			return err
		}

		// Use page width of 612, and calculate the height proportionally based on the image.
		height := 612 * float64(img.Height) / float64(img.Width)

		// Make a page.
		page := pdf.NewPdfPage()
		bbox := pdf.PdfRectangle{0, 0, 612, height}
		page.MediaBox = &bbox

		imgName := pdfcore.PdfObjectName(fmt.Sprintf("Im%d", idx+1))

		// Create an XObject Image for the PDF.
		ximg, err := pdf.NewXObjectImageFromImage(imgName, img, nil)
		if err != nil {
			unicommon.Log.Error("Failed to create xobject image: %s", err)
			return err
		}
		err = ximg.Compress()
		if err != nil {
			unicommon.Log.Error("Failed: %v", err)
			return err
		}
		// Add to the page resources.
		err = page.AddImageResource(imgName, ximg)
		if err != nil {
			unicommon.Log.Error("Failed to create xobject image: %s", err)
			return err
		}

		// Make a default graphics state.
		gs0 := pdfcore.PdfObjectDictionary{}
		name := pdfcore.PdfObjectName("Normal")
		gs0["BM"] = &name
		page.AddExtGState("GS0", &gs0)

		// Content stream to load the image.
		contentStr := fmt.Sprintf("q\n"+
			"/GS0 gs\n"+
			"612 0 0 %.0f 0 0 cm\n"+
			"/%s Do\n"+
			"Q", height, imgName)
		page.AddContentStreamByString(contentStr)

		err = pdfWriter.AddPage(page)
		if err != nil {
			unicommon.Log.Error("Failed to add page: %s", err)
			return err
		}
	}

	fWrite, err := os.Create(outputPath)
	if err != nil {
		return err
	}

	defer fWrite.Close()

	err = pdfWriter.Write(fWrite)
	if err != nil {
		return err
	}

	return nil
}
